image: ubuntu:16.04

stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay

build-staging:
  image: docker:latest
  services:
  - docker:dind
  tags:
    - trufla-staging-deploy
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -f app/staging.dockerfile -t "$CI_REGISTRY_IMAGE/staging:$CI_COMMIT_SHA" app/
    - docker push "$CI_REGISTRY_IMAGE/staging:$CI_COMMIT_SHA"
  cache:
    untracked: true
  environment:
    name: staging
  only:
    - staging

deploy-staging:
  image: registry.gitlab.com/codetouch/sharpone/sharpone/deploy:1.3.0
  stage: deploy
  tags:
    - trufla-staging-deploy
  script:
    - export AWS_DEFAULT_REGION=ca-central-1
    - export ROLE_ARN=$STAGING_ROLE_ARN
    - export SESSION_NAME=${CI_JOB_ID}-$(date +%d%m%Y)
    - STS=$(aws sts assume-role --role-arn "${ROLE_ARN}" --role-session-name "${SESSION_NAME}" --duration-seconds 900 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
    - export AWS_ACCESS_KEY_ID=$(echo $STS | awk '{print $1;}' )
    - export AWS_SECRET_ACCESS_KEY=$(echo $STS | awk '{print $2;}' )
    - export AWS_SESSION_TOKEN=$(echo $STS | awk '{print $3;}' )
    - ecs-deploy -c STA-ECS-Cluster -n s1-cgi -i $CI_REGISTRY_IMAGE/staging:$CI_COMMIT_SHA
  environment:
    name: staging
  only:
  - staging

build-production:
  image: docker:latest
  services:
  - docker:dind
  tags:
    - docker
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -f app/production.dockerfile -t "$CI_REGISTRY_IMAGE/production:$CI_COMMIT_SHA" app/
    - docker push "$CI_REGISTRY_IMAGE/production:$CI_COMMIT_SHA"
  cache:
    untracked: true
  environment:
    name: production
  only:
    - master

deploy-production:
  stage: deploy
  # tags:
  #   - trufla-staging-deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PRODUCTION")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    # - export AWS_DEFAULT_REGION=ca-central-1
    # - export ROLE_ARN=$PRODUCTION_ROLE_ARN
    # - export SESSION_NAME=${CI_JOB_ID}-$(date +%d%m%Y)
    # - STS=$(aws sts assume-role --role-arn "${ROLE_ARN}" --role-session-name "${SESSION_NAME}" --duration-seconds 900 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
    # - export AWS_ACCESS_KEY_ID=$(echo $STS | awk '{print $1;}' )
    # - export AWS_SECRET_ACCESS_KEY=$(echo $STS | awk '{print $2;}' )
    # - export AWS_SESSION_TOKEN=$(echo $STS | awk '{print $3;}' )
    - ssh -tt ubuntu@$PRODUCTION_SERVER "docker service update --image $CI_REGISTRY_IMAGE/production:$CI_COMMIT_SHA sharpone_cgi"
  environment:
    name: production
  only:
  - master
